# framechecker.py
# The common code for the tests that verify LLVM frames are being cleared before
# they are reused.
#
# Created:  21-FEB-2019

from enum import Enum

# return values for CheckLLVMFrames
class LLVMFrameStatus(Enum):
    FRAMES_OK = 1
    NO_LLVM = 2
    NO_SUBFRAMES = 3
    BAD_PROLOGUE = 4
    BAD_BODY = 5
    BAD_PROLOGUE_AND_BODY = 6

# various constants needed by CheckLLVMFrames
ENABLE_TAINT_SUFFIX = "taint2_enable_taint"
LLVM_FUNCTION_PREFIX = "define "
TCG_NAME_PREFIX = "@tcg-llvm-tb-"
BODY_PREFIX = "; <label>:"

RESET_FUNCTION = "@taint_reset_frame"
DELETE_FUNCTION = "@taint_delete"
DELETE_ADDR_ARG = "*), i64 0, i64 "

# the next LLVM frame address shows up in taint_delete as first argument after
# the shadow
NEXT_FRAME_ARG = "*), i64 80000,"

PUSH_FRAME_FUNCTION = "@taint_push_frame"
COPY_FUNCTION = "@taint_copy"
POP_FRAME_FUNCTION = "@taint_pop_frame"

def CheckLLVMFrames(inFileName):
    """
    Verify that the LLVM code in the file provided (generated by taint2) has
    the instructions necessary to clear the LLVM frames before they are reused.
    The return value is one of the enumeration values from LLVMFrameStatus.
    """
    
    # there are two kinds of frame clearing that need to be checked for
    # first, in the prologue of the guest block (which is an LLVM function), the
    # LLVM frames must be reset back to the first, and then the first one
    # cleared of any leftover taint
    # second, in the body of the LLVM function, there may be calls to routines
    # preceeded by taint_push_frame (which sets up a new frame in the LLVM
    # shadow) - this new frame must be cleared before the taint on the arguments
    # to the called routine are copied into the frame
    
    retCode = LLVMFrameStatus.FRAMES_OK
    with open(inFileName, 'r') as inFile:
        taintEnabled = False
        inPrologue = False
        inBody = False
        gotFrameReset = False
        gotFrameDelete = False
        gotSubframeDelete = False
        blocksChecked = 0
        prologuesOK = 0
        prologueErrors = 0
        subframesFound = 0
        subframesOK = 0
        subframeErrors = 0

        for line in inFile:
            line = line.strip()
            
            # won't have the taint instrumentation in the LLVM assembly until
            # after taint is enabled, so first wait for that
            if (not taintEnabled):
                if (line.endswith(ENABLE_TAINT_SUFFIX)):
                    taintEnabled = True
            else:
                # are we starting the prologue for the LLVM function for the
                # guest block?
                if (line.startswith(LLVM_FUNCTION_PREFIX) and
                    (TCG_NAME_PREFIX in line)):
                    inPrologue = True
                    inBody = False
                    gotFrameReset= False
                    gotFrameDelete = False
                    llvmAddrS = ""
                    blocksChecked = blocksChecked + 1
                elif (inPrologue):
                    if (line.startswith(BODY_PREFIX)):
                        inPrologue = False
                        inBody = True
                        gotSubframeDelete = False
                        gotPushFrame = False
                        if (gotFrameReset and (not gotFrameDelete)):
                            prologueErrors = prologueErrors + 1
                        elif (gotFrameDelete and (not gotFrameReset)):
                            prologueErrors = prologueErrors + 1
                        elif ((not gotFrameDelete) and (not gotFrameReset)):
                            prologueErrors = prologueErrors + 1
                        else:
                            prologuesOK = prologuesOK + 1
                    elif (RESET_FUNCTION in line):
                        if (not gotFrameReset):
                            gotFrameReset = True
                            typePos = line.index("i64 ")
                            toPos = line.index(" to ")
                            llvmAddrS = line[typePos+4:toPos]
                    elif (gotFrameReset):
                        if ((DELETE_FUNCTION in line) and (llvmAddrS in line)):
                            if (not gotFrameDelete):
                                # make sure clearing from start of frame
                                if (DELETE_ADDR_ARG in line):
                                    gotFrameDelete = True
                elif (inBody):
                    if (line == "}"):
                        inBody = False
                    elif (POP_FRAME_FUNCTION in line):
                        # need to reset, as there may be more than one call in
                        # this body
                        gotSubframeDelete = False
                    elif (not gotSubframeDelete):
                        if ((DELETE_FUNCTION in line) and (llvmAddrS in line)
                            and (NEXT_FRAME_ARG in line)):
                            lastCPPos = line.rindex(")")
                            # make sure omit any metadata at end of line
                            temp = line[:lastCPPos]
                            lastSpacePos = temp.rindex(" ")
                            sizeS = temp[lastSpacePos+1:]
                            sizeI = int(sizeS)
                            # As of 15-FEB-2019, a slot is MAXFAMESIZE bytes in
                            # size, which is 16 bytes, so that's the bare
                            # minimum frame size (although I've never seen less
                            # than 2 slots)
                            if (sizeI > 15):
                                gotSubframeDelete = True
                                numArgsPopulated = 0
                        elif (PUSH_FRAME_FUNCTION in line):
                            subframesFound = subframesFound + 1
                            subframeErrors = subframeErrors + 1
                    else:
                        if (PUSH_FRAME_FUNCTION in line):
                            subframesFound = subframesFound + 1
                            subframesOK = subframesOK + 1
    
    if (0 == blocksChecked):
        retCode = LLVMFrameStatus.NO_LLVM
    elif (0 == subframesFound):
        retCode = LLVMFrameStatus.NO_SUBFRAMES
    elif ((prologueErrors > 0) and (subframeErrors > 0)):
        retCode = LLVMFrameStatus.BAD_PROLOGUE_AND_BODY
    elif (prologueErrors > 0):
        retCode = LLVMFrameStatus.BAD_PROLOGUE
    elif (subframeErrors > 0):
        retCode = LLVMFrameStatus.BAD_BODY
    
    return retCode
